{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","apiKey","setApiKey","promptText","setPromptText","prompt","maxTokens","temperature","n","payload","setPayload","className","type","value","onChange","e","target","changeApiKeyHandler","changePromptHandler","onClick","pl","submitHandler","responseHandler","openAIResponse","choices","text","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAiEeA,MAxDf,WACE,MAA4BC,mBAAiB,IAA7C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCF,mBAAiB,IAArD,mBAAOG,EAAP,KAAmBC,EAAnB,KAEA,EAA8BJ,mBAA4B,CACxDK,OAAQ,GACRC,UAAW,GACXC,YAAa,GACbC,EAAG,IAJL,mBAAOC,EAAP,KAAgBC,EAAhB,KAwBA,OACE,sBAAKC,UAAU,MAAf,UACE,oDACA,uBACA,uBACEC,KAAK,WACLC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAxBY,SAACA,GAC3Bb,EAAUa,EAAEC,OAAOH,OAuBEI,CAAoBF,MAEvC,uBACA,0BACEJ,UAAU,WACVE,MAAOV,EACPW,SAAU,SAACC,GAAD,OA1BY,SAACA,GAC3BX,EAAcW,EAAEC,OAAOH,OAyBFK,CAAoBH,MAEvC,uBACA,wBAAQI,QAAS,kBAzBC,WACpB,IAAMC,EAAE,2BAAQX,GAAR,IAAiBJ,OAAQF,IACjCO,EAAWU,GAuBcC,IAAvB,sBACGpB,KAAYQ,EAAQJ,QACrB,cAAC,IAAD,CACEJ,OAAQA,EACRQ,QAASA,EACTa,gBAzBgB,SAACC,GACvBnB,EAAc,GAAD,OAAID,EAAaoB,EAAeC,QAAQ,GAAGC,cCpB7CC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1c0c05b6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport OpenAIAPI from \"react-openai-api\";\nimport {\n  CompletionPayload,\n  CompletionResponse,\n} from \"react-openai-api/lib/esm/types\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [apiKey, setApiKey] = useState<string>(\"\");\n  const [promptText, setPromptText] = useState<string>(\"\");\n\n  const [payload, setPayload] = useState<CompletionPayload>({\n    prompt: \"\",\n    maxTokens: 25,\n    temperature: 0.5,\n    n: 1,\n  });\n\n  const changeApiKeyHandler = (e: any) => {\n    setApiKey(e.target.value);\n  };\n\n  const changePromptHandler = (e: any) => {\n    setPromptText(e.target.value);\n  };\n\n  const submitHandler = () => {\n    const pl = { ...payload, prompt: promptText };\n    setPayload(pl);\n  };\n\n  const responseHandler = (openAIResponse: CompletionResponse) => {\n    setPromptText(`${promptText + openAIResponse.choices[0].text}`);\n  };\n\n  return (\n    <div className=\"App\">\n      <label>Api key to test</label>\n      <br />\n      <input\n        type=\"password\"\n        value={apiKey}\n        onChange={(e) => changeApiKeyHandler(e)}\n      />\n      <br />\n      <textarea\n        className=\"textarea\"\n        value={promptText}\n        onChange={(e) => changePromptHandler(e)}\n      ></textarea>\n      <br />\n      <button onClick={() => submitHandler()}>Submit</button>\n      {!!apiKey && !!payload.prompt && (\n        <OpenAIAPI\n          apiKey={apiKey}\n          payload={payload}\n          responseHandler={responseHandler}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}